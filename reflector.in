#!/usr/bin/python3

import os, sys, logging, getopt, json, threading, codecs, time
import pwd, socket
from subprocess import Popen, PIPE

# USAGE
USAGE = """\
USAGE: reflector [OPTIONS] [DISK...]

OPTIONS:

  -h, --help  print this message and exit
"""

# system config
PACKAGE = '@PACKAGE@'
PKGSYSCONFDIR = '@pkgsysconfdir@'
LOGDIR = '@pkglogdir@'
PKGVARDIR = '@pkgvardir@'
STATEDIR = os.path.join(PKGVARDIR, 'state')

# DATE_FORMAT: format used in statefile
DATE_FORMAT = '%Y/%m/%d %H:%M:%S'

# PipeThread:
class PipeThread :
    
    # __init__:
    def __init__ (self, name, fin) :
        self.name = name
        self.fin = fin
        self.encoder = codecs.getincrementaldecoder('utf-8')(errors='replace')
        self.thread = threading.Thread(target=self.run)
        self.thread.start()

    # join
    def join (self) :
        self.thread.join()

    # run
    def run (self) :
        while True :
            self.text = ''
            data = self.fin.read(4096)
            if not data :
                break
            self.text += self.encoder.decode(data, False)
            self.process_text(False)
        self.text += self.encoder.decode(b'', True)
        self.process_text(True)
        self.fin.close()

    # process_text
    def process_text (self, final) :
        while True :
            i = self.text.find('\n')
            if i < 0 :
                if final :
                    if self.text :
                        self.process_line(self.text)
                    self.text = ''
                return
            self.process_line(self.text[:i])
            self.text = self.text[i+1:]

    # process_line
    def process_line (self, line) :
        trace("%s: %s" % (self.name, line.rstrip()))

# CfgDisk
class CfgDisk :

    # __init__:
    def __init__ (self, cfgfile) :
        conf = json.load(open(cfgfile, 'rt'))
        self.ssh_port = int(conf.pop('ssh_port', 0))
        self.ssh_key = conf.pop('ssh_key', '')
        self.source = conf.pop('source')
        self.dest = conf.pop('dest')
        self.check_file = conf.pop('check_file', '')
        self.rt_check_file = conf.pop('rt_check_file', '')
        self.filters = tuple(conf.pop('filters', ()))
        assert not conf, conf

# logging
def _log (lvl, msg) :
    logger = logging.getLogger(PACKAGE)
    logger.log(lvl, msg)
    
def trace (msg) : _log(logging.DEBUG, msg)
def error (msg) : _log(logging.ERROR, msg)

# log_setup
def log_setup (subdir, basename, date) :
    logger = logging.getLogger(PACKAGE)
    logger.setLevel(1)
    # console handler
    chdlr = logging.StreamHandler(stream=sys.stderr)
    logger.addHandler(chdlr)
    # logfile
    logfile = open_logfile(dirname=os.path.join(LOGDIR, subdir),
                           basename=basename, date=date)
    fhdlr = logging.FileHandler(logfile)
    logger.addHandler(fhdlr)
    trace("%s" % ' '.join(sys.argv))
    trace("started at %s" % date)
    trace("logfile: '%s'" % logfile)

# open_logfile
def open_logfile (dirname, basename, date) :
    mkdir(dirname)
    n, sfx = 0, ''
    while True :
        logfile = os.path.join(dirname, '%s.%s%s.log' % (basename, date, sfx))
        try:
            f = open(logfile, 'x')
        except FileExistsError:
            n += 1
            sfx = '.%d' % n
            continue
        f.close()
        return os.path.realpath(logfile)

# mkdir
def mkdir (dirname) :
    if os.path.isdir(dirname) :
        return
    mkdir(os.path.dirname(dirname))
    try: os.mkdir(dirname)
    except FileExistsError: pass

# cmdexec
def cmdexec (cmd, **kwargs) :
    cwd = os.path.realpath(kwargs.pop('cwd', '.'))
    user = pwd.getpwuid(os.getuid()).pw_name
    host = socket.gethostname()
    pcmd = ' '.join((("\"%s\"" % a) if ' ' in a else a)
                    for a in cmd)
    trace("%s@%s:%s> %s" % (user, host, cwd, pcmd))
    proc = Popen(cmd, cwd=cwd, **kwargs)
    return proc

# check_delay
def check_delay (delay, last_time, new_time) :
    # [fixme] delay is ignored for now
    last_stamp = time.mktime(last_time[:3] + (0, 0, 0, 0, 0, -1))
    new_stamp = time.mktime(new_time[:3] + (0, 0, 0, 0, 0, -1))
    return (new_stamp - last_stamp) >= 86400

# check_state
def check_state (disk) :
    statefile = os.path.join(STATEDIR, disk + '.state')
    try:
        state = json.load(open(statefile, 'rt'))
    except FileNotFoundError:
        state = {'date': time.strftime(DATE_FORMAT, time.localtime(0))}
    trace("%s: last sync date: %s" % (disk, state['date']))
    return check_delay('1d', time.strptime(state['date'], DATE_FORMAT), START_TIME)

# update_state
def update_state (disk, tm) :
    mkdir(STATEDIR)
    statefile = os.path.join(STATEDIR, disk + '.state')
    tmpstate = statefile + '.tmp'
    with open(tmpstate, 'wt') as f :
        json.dump({'date': time.strftime(DATE_FORMAT, tm)}, f)
        f.flush()
        os.fsync(f.fileno())
    os.rename(tmpstate, statefile)

# process_disk
def process_disk (disk) :
    cfgfile = os.path.join(PKGSYSCONFDIR, 'disks', disk + '.conf')
    cfgdisk = CfgDisk(cfgfile)
    if cfgdisk.check_file and not os.path.exists(cfgdisk.check_file) :
        error("check_file does not exist: '%s'" % cfgdisk.check_file)
        return False
    cmd = ["/usr/bin/rsync"]
    cmd.extend(("--archive", "--numeric-ids", "--one-file-system",
                "--sparse", "--no-specials", "--itemize-changes",
                "--delete", "--delete-excluded"))
    cmd.extend(("--include-from=-",))
    if ':' in cfgdisk.source :
        rsh = '/usr/bin/ssh'
        if cfgdisk.ssh_port != 0 :
            rsh += " -p %d" % cfgdisk.ssh_port
        if cfgdisk.ssh_key :
            rsh += " -i %s" % cfgdisk.ssh_key
        cmd.extend(("--rsh", rsh))
        rspath = "sudo reflector --remote"
        if cfgdisk.rt_check_file :
            rspath += ' --rt-check-file %s' % cfgdisk.rt_check_file
        rspath += ' --'
        cmd.extend(("--rsync-path", rspath))
        cmd.extend(("--compress", "--compress-level=9"))
    cmd.extend((cfgdisk.source, cfgdisk.dest))
    # open a logfile
    logfile = open_logfile(dirname=os.path.join(LOGDIR, 'rsync'),
                           basename=disk, date=START_DATE)
    trace("rsync logfile: '%s'" % logfile)
    flog = open(logfile, 'wb')
    # run
    proc = cmdexec(cmd, stdin=PIPE, stdout=flog, stderr=PIPE)
    p_err = PipeThread('rsync-err', proc.stderr)
    for line in cfgdisk.filters :
        proc.stdin.write(line.encode())
        proc.stdin.write('\n'.encode())
    proc.stdin.close()
    p_err.join()
    r = proc.wait()
    flog.close()
    assert r == 0, r
    return True

# main
def main () :
    os.nice(20)
    # date
    global START_TIME, START_DATE
    START_TIME = time.localtime()
    START_DATE = time.strftime('%Y-%m-%d-%H%M%S', START_TIME)
    # parse the command line
    remote = False
    rt_check_file = ''
    shortopts = 'h'
    longopts = ['help', 'remote', 'rt-check-file=']
    opts, args = getopt.gnu_getopt(sys.argv[1:], shortopts, longopts)
    for o, a in opts :
        if o in ('-h', '--help') :
            sys.stderr.write(USAGE)
            sys.exit(0)
        elif o in ('--remote',) :
            remote = True
        elif o in ('--rt-check-file',) :
            rt_check_file = a
        else :
            assert 0, (o, a)
    # setup the logger
    log_setup(subdir=('remote' if remote else 'reflector'),
              basename=('remote' if remote else 'reflector'),
              date=START_DATE)
    # remaining args
    if remote :
        return process_remote(args, check_file=rt_check_file)
    else :
        disklist = args if args else list_disks()
        return process_local(disklist)

# process_local
def process_local (disklist) :
    # go
    errors = []
    for disk in disklist :
        # read the current state
        if check_state(disk) :
            trace("%s: this disk needs update" % disk)
        else :
            trace("%s: this disk is up to date" % disk)
            continue
        # run
        if process_disk(disk) :
            update_state(disk, START_TIME)
        else :
            errors.append(disk)
    # report
    if errors :
        error("%d disks failed:" % len(errors))
        for disk in errors :
            error(" - %s" % disk)
        return 1
    else :
        trace("all done!")
        return 0

# process_remote:
def process_remote (rsync_args, check_file) :
    if check_file and not os.path.exists(check_file) :
        error("remote check file not found: '%s'" % check_file)
        return 1
    cmd = ['/usr/bin/rsync'] + rsync_args
    proc = cmdexec(cmd)
    return proc.wait()

# exec
if __name__ == '__main__' :
    sys.exit(main())
